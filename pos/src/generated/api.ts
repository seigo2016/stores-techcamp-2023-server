/* tslint:disable */
/* eslint-disable */
/**
 * POS
 * POS API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RequestItem
 */
export interface RequestItem {
    /**
     * 
     * @type {string}
     * @memberof RequestItem
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface RequestOrder
 */
export interface RequestOrder {
    /**
     * 
     * @type {string}
     * @memberof RequestOrder
     */
    'userId'?: string;
    /**
     * 
     * @type {Array<RequestItem>}
     * @memberof RequestOrder
     */
    'items'?: Array<RequestItem>;
}
/**
 * 
 * @export
 * @interface ResponseItem
 */
export interface ResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseItem
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseItem
     */
    'preview'?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface ResponseItems
 */
export interface ResponseItems {
    /**
     * 
     * @type {Array<ResponseItem>}
     * @memberof ResponseItems
     */
    'items'?: Array<ResponseItem>;
}
/**
 * 
 * @export
 * @interface ResponseOrder
 */
export interface ResponseOrder {
    /**
     * 
     * @type {string}
     * @memberof ResponseOrder
     */
    'OrderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseOrder
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseOrder
     */
    'userId'?: string;
    /**
     * 
     * @type {Array<ResponseItem>}
     * @memberof ResponseOrder
     */
    'items'?: Array<ResponseItem>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getOrders', 'userId', userId)
            const localVarPath = `/orders/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommends: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserRecommends', 'userId', userId)
            const localVarPath = `/users/{userId}/recommends`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestOrder} [requestOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrders: async (requestOrder?: RequestOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRecommends(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRecommends(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RequestOrder} [requestOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOrders(requestOrder?: RequestOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOrders(requestOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(options?: AxiosRequestConfig): AxiosPromise<Array<ResponseItem>> {
            return localVarFp.getItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: DefaultApiGetOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseOrder> {
            return localVarFp.getOrders(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: DefaultApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserById(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetUserRecommendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommends(requestParameters: DefaultApiGetUserRecommendsRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseItems> {
            return localVarFp.getUserRecommends(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiPostOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOrders(requestParameters: DefaultApiPostOrdersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ResponseOrder> {
            return localVarFp.postOrders(requestParameters.requestOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrders operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrdersRequest
 */
export interface DefaultApiGetOrdersRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetOrders
     */
    readonly userId: string
}

/**
 * Request parameters for getUserById operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUserByIdRequest
 */
export interface DefaultApiGetUserByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetUserById
     */
    readonly userId: string
}

/**
 * Request parameters for getUserRecommends operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUserRecommendsRequest
 */
export interface DefaultApiGetUserRecommendsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetUserRecommends
     */
    readonly userId: string
}

/**
 * Request parameters for postOrders operation in DefaultApi.
 * @export
 * @interface DefaultApiPostOrdersRequest
 */
export interface DefaultApiPostOrdersRequest {
    /**
     * 
     * @type {RequestOrder}
     * @memberof DefaultApiPostOrders
     */
    readonly requestOrder?: RequestOrder
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getItems(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrders(requestParameters: DefaultApiGetOrdersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOrders(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserById(requestParameters: DefaultApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserById(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetUserRecommendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserRecommends(requestParameters: DefaultApiGetUserRecommendsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserRecommends(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiPostOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postOrders(requestParameters: DefaultApiPostOrdersRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postOrders(requestParameters.requestOrder, options).then((request) => request(this.axios, this.basePath));
    }
}



